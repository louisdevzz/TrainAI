[
    {
        "name":"Radix UI",
        "description":"Using embedded Radix primitives on the NEAR VM is simple and straight-forward.",
        "js":"return (\r\n    <Label.Root className=\"LabelRoot\">\r\n      Hello World!\r\n    </Label.Root>\r\n);",
        "limitations":"Currently, NEAR VM impose some limitations on the Radix UI framework:\r\n\r\nForm component is not available.\r\nYou can't use .Portal definitions.\r\nUsing CSS is different. You'll have to use a styled.div wrapper."
    },
    {
        "name":"Using CSS",
        "description":"Here is an example on how to use CSS through the styled.div wrapper:",
        "js":"const Wrapper = styled.div`\r\n  .SwitchRoot {\r\n    ...\r\n  }\r\n  .SwitchThumb {\r\n    ...\r\n  }\r\n`;\r\n\r\nreturn (\r\n  <Wrapper>\r\n    <Switch.Root className=\"SwitchRoot\">\r\n      <Switch.Thumb className=\"SwitchThumb\" />\r\n    </Switch.Root>\r\n  </Wrapper>\r\n);"
    },
    {
        "name":"Using styled-components",
        "description":"You can use styled-components in combination with Radix UI primitives",
        "js":"const SwitchRoot = styled(\"Switch.Root\")`\r\n  all: unset;\r\n  display: block;\r\n  width: 42px;\r\n  height: 25px;\r\n  background-color: var(--blackA9);\r\n  border-radius: 9999px;\r\n  position: relative;\r\n  box-shadow: 0 2px 10px var(--blackA7);\r\n\r\n  &[data-state=\"checked\"] {\r\n    background-color: black;\r\n  }\r\n`;\r\n\r\nconst SwitchThumb = styled(\"Switch.Thumb\")`\r\n  all: unset;\r\n  display: block;\r\n  width: 21px;\r\n  height: 21px;\r\n  background-color: white;\r\n  border-radius: 9999px;\r\n  box-shadow: 0 2px 2px var(--blackA7);\r\n  transition: transform 100ms;\r\n  transform: translateX(2px);\r\n  will-change: transform;\r\n\r\n  &[data-state=\"checked\"] {\r\n    transform: translateX(19px);\r\n  }\r\n`;\r\n\r\nreturn (\r\n  <SwitchRoot>\r\n    <SwitchThumb />\r\n  </SwitchRoot>\r\n);"
    },
    {
        "name":"Forward references",
        "description":"The NEAR VM re-implements React's forwardRef as ref=\"forwardedRef\".\r\n\r\nYou can use ref=\"forwardedRef\" to forward references through <Widget /> to support Radix's asChild property",
        "js":"<AlertDialog.Trigger asChild>\r\n  <Widget\r\n    src=\"near/widget/TestButton\"\r\n    props={{ label: \"Click Me\" }}\r\n  />\r\n</AlertDialog.Trigger>\r\nconst Button = styled.button`\r\n  background: #f00;\r\n`;\r\n\r\nreturn (\r\n  <Button type=\"button\" ref=\"forwardedRef\">\r\n    {props.label}: Forwarded\r\n  </Button>\r\n);"
    }
]