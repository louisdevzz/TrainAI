[
    {
        "name":"Familiar to Web Developers",
        "description":"NEAR Components are built on top of React Components, meaning that they:\r\n\r\nHandle input through the props variable\r\nHandle state through the useState hook\r\nHandle side effects through the useEffect hook\r\nIn contrast with React, NEAR Components are not wrapped in a function or class definition.\r\n\r\nIndeed, when writing a NEAR Component, you focus on writing the body of the component, which is a function that returns the JSX to be rendered.",
        "js":"const name = props.name || \"Maria\";\r\nconst [count, setCount] = useState(1);\r\n\r\nreturn (\r\n  <div>\r\n    <p> {count} cheers for {name}! </p>\r\n    <button onClick={() => setCount(count + 1)}>Cheers!</button>\r\n  </div>\r\n);"
    },
    {
        "name":"NEAR Native",
        "description":"NEAR Components can readily interact with smart contracts in the NEAR Blockchain. While view methods are free to query by anyone, call methods require the user to be logged in.",
        "js":"const counter = Near.view('counter.near-examples.testnet', 'get_num')\r\n\r\nif(counter === null) return 'Loading...'\r\n\r\nconst add = () => {\r\n  Near.call('counter.near-examples.testnet', 'increment')\r\n}\r\n\r\nconst subtract = () => {\r\n  Near.call('counter.near-examples.testnet', 'decrement')\r\n}\r\n\r\nreturn <>\r\n  <p> Counter: {counter} </p>\r\n  {!context.accountId &&\r\n    <p color=\"red\"> Please login to interact with the contract</p>\r\n  }\r\n  {context.accountId && \r\n  <>\r\n    <button onClick={add}> + </button>\r\n    <button onClick={subtract}> - </button>\r\n  </>\r\n  }\r\n</>"
    },
    {
        "name":"Social from the Get-Go",
        "description":"NEAR Components are easily integrated with NEAR Social, a social network built on NEAR.",
        "js":"const item = (blockHeight) => ({ type: 'social', path: 'influencer.testnet/post/main', blockHeight });\r\n\r\n// retrieve indexed posts by influencer.testnet\r\nconst idx_posts = Social.index(\r\n  'post', 'main', { accountId: ['influencer.testnet'] }\r\n);\r\n\r\nif (idx_posts === null) return 'Loading...';\r\n\r\n// retrieve likes for each post\r\nconst likes = idx_posts.map(\r\n  index => Social.index('like', item(index.blockHeight)).length\r\n);\r\n\r\n// retrieve data for each post\r\nconst post_data = idx_posts.map(\r\n  index => Social.get(`${index.accountId}/post/main`, index.blockHeight)\r\n);\r\n\r\n// defined \"Like\" function\r\nconst like = (blockHeight) => Social.set(\r\n  {index:{like: JSON.stringify({key: item(blockHeight), value: {type: 'like'}})}}\r\n)\r\n\r\nreturn <>\r\n  <h5>Posts from <i>influencer.testnet</i></h5>\r\n  {post_data.map((post, idx) =>\r\n    <div className=\"mt-3\">\r\n      <div>{JSON.parse(post).text} - {likes[idx]} likes</div>\r\n      {context.accountId && <button className=\"btn btn-danger btn-sm\" onClick={() => like(idx_posts[idx].blockHeight)}>Like</button>}\r\n    </div>\r\n  )}\r\n</>\r\n"
    },
    {
        "name":"Fully On-Chain & Easily Composable",
        "description":"Leveraging the cheap storage and computation of the NEAR Blockchain, NEAR Components' code is stored fully on-chain in the SocialDB smart contract (social.near).",
        "js":{
            "social":"return Social.get('influencer.testnet/widget/Greeter')",
            "component":"// Rendering the component with props\r\nreturn <Widget src=\"influencer.testnet/widget/Greeter\"\r\n               props={{name: \"Anna\", amount: 3}} />;"
        }
    },
    {
        "name":"Multi-Chain by Design",
        "description":"NEAR Components can easily interact with Ethereum compatible blockchains, helping to easily create decentralized frontends for multi-chain applications.",
        "js":"if (\r\n  state.chainId === undefined &&\r\n  ethers !== undefined &&\r\n  Ethers.send(\"eth_requestAccounts\", [])[0]\r\n) {\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((chainIdData) => {\r\n      if (chainIdData?.chainId) {\r\n        State.update({ chainId: chainIdData.chainId });\r\n      }\r\n    });\r\n}\r\nif (state.chainId !== undefined && state.chainId !== 1) {\r\n  return <p>Switch to Ethereum Mainnet</p>;\r\n}\r\n\r\n// FETCH LIDO ABI\r\n\r\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\r\nconst tokenDecimals = 18;\r\n\r\nconst lidoAbi = fetch(\r\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\r\n);\r\nif (!lidoAbi.ok) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst iface = new ethers.utils.Interface(lidoAbi.body);\r\n\r\n// FETCH LIDO STAKING APR\r\n\r\nif (state.lidoArp === undefined) {\r\n  const apr = fetch(\r\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\r\n  );\r\n  if (!apr) return;\r\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\r\n}\r\n\r\n// HELPER FUNCTIONS\r\n\r\nconst getStakedBalance = (receiver) => {\r\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\r\n\r\n  return Ethers.provider()\r\n    .call({\r\n      to: lidoContract,\r\n      data: encodedData,\r\n    })\r\n    .then((rawBalance) => {\r\n      const receiverBalanceHex = iface.decodeFunctionResult(\r\n        \"balanceOf\",\r\n        rawBalance\r\n      );\r\n\r\n      return Big(receiverBalanceHex.toString())\r\n        .div(Big(10).pow(tokenDecimals))\r\n        .toFixed(2)\r\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n    });\r\n};\r\n\r\nconst submitEthers = (strEther, _referral) => {\r\n  if (!strEther) {\r\n    return console.log(\"Amount is missing\");\r\n  }\r\n  const erc20 = new ethers.Contract(\r\n    lidoContract,\r\n    lidoAbi.body,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\r\n\r\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\r\n    console.log(\"transactionHash is \" + transactionHash);\r\n  });\r\n};\r\n\r\n// DETECT SENDER\r\n\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    console.log(\"set sender\", accounts[0]);\r\n  }\r\n}\r\n\r\n//if (!state.sender)  return \"Please login first\";\r\n\r\n// FETCH SENDER BALANCE\r\n\r\nif (state.balance === undefined && state.sender) {\r\n  Ethers.provider()\r\n    .getBalance(state.sender)\r\n    .then((balance) => {\r\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\r\n    });\r\n}\r\n\r\n// FETCH SENDER STETH BALANCE\r\n\r\nif (state.stakedBalance === undefined && state.sender) {\r\n  getStakedBalance(state.sender).then((stakedBalance) => {\r\n    State.update({ stakedBalance });\r\n  });\r\n}\r\n\r\n// FETCH TX COST\r\n\r\nif (state.txCost === undefined) {\r\n  const gasEstimate = ethers.BigNumber.from(1875000);\r\n  const gasPrice = ethers.BigNumber.from(1500000000);\r\n\r\n  const gasCostInWei = gasEstimate.mul(gasPrice);\r\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\r\n\r\n  let responseGql = fetch(\r\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\r\n    {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        query: `{\r\n          bundle(id: \"1\" ) {\r\n            ethPrice\r\n          }\r\n        }`,\r\n      }),\r\n    }\r\n  );\r\n\r\n  if (!responseGql) return \"\";\r\n\r\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\r\n\r\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\r\n\r\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\r\n}\r\n\r\n// FETCH CSS\r\n\r\nconst cssFont = fetch(\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\r\n).body;\r\nconst css = fetch(\r\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\r\n).body;\r\n\r\nif (!cssFont || !css) return \"\";\r\n\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n    ${cssFont}\r\n    ${css}\r\n`,\r\n  });\r\n}\r\nconst Theme = state.theme;\r\n\r\n// OUTPUT UI\r\n\r\nconst getSender = () => {\r\n  return !state.sender\r\n    ? \"\"\r\n    : state.sender.substring(0, 6) +\r\n        \"...\" +\r\n        state.sender.substring(state.sender.length - 4, state.sender.length);\r\n};\r\n\r\nreturn (\r\n  <Theme>\r\n    <div className=\"LidoContainer\">\r\n      <div className=\"Header\">Stake Ether</div>\r\n      <div className=\"SubHeader\">Stake ETH and receive stETH while staking.</div>\r\n\r\n      <div className=\"LidoForm\">\r\n        {state.sender && (\r\n          <>\r\n            <div className=\"LidoFormTopContainer\">\r\n              <div className=\"LidoFormTopContainerLeft\">\r\n                <div className=\"LidoFormTopContainerLeftContent1\">\r\n                  <div className=\"LidoFormTopContainerLeftContent1Container\">\r\n                    <span>Available to stake</span>\r\n                    <div className=\"LidoFormTopContainerLeftContent1Circle\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"LidoFormTopContainerLeftContent2\">\r\n                  <span>\r\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"LidoFormTopContainerRight\">\r\n                <div className=\"LidoFormTopContainerRightContent1\">\r\n                  <div className=\"LidoFormTopContainerRightContent1Text\">\r\n                    <span>{getSender()}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"LidoSplitter\" />\r\n          </>\r\n        )}\r\n        <div\r\n          className={\r\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\r\n          }\r\n        >\r\n          <div className=\"LidoFormTopContainerLeft\">\r\n            <div className=\"LidoFormTopContainerLeftContent1\">\r\n              <div className=\"LidoFormTopContainerLeftContent1Container\">\r\n                <span>Staked amount</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"LidoFormTopContainerLeftContent2\">\r\n              <span>\r\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\r\n                &nbsp;stETH\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"LidoFormTopContainerRight\">\r\n            <div className=\"LidoAprContainer\">\r\n              <div className=\"LidoAprTitle\">Lido APR</div>\r\n              <div className=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"LidoStakeForm\">\r\n        <div className=\"LidoStakeFormInputContainer\">\r\n          <span className=\"LidoStakeFormInputContainerSpan1\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\r\n              ></path>\r\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\r\n              ></path>\r\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\r\n              <path\r\n                opacity=\"0.2\"\r\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\r\n              ></path>\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\r\n              ></path>\r\n            </svg>\r\n          </span>\r\n          <span className=\"LidoStakeFormInputContainerSpan2\">\r\n            <input\r\n              disabled={!state.sender}\r\n              className=\"LidoStakeFormInputContainerSpan2Input\"\r\n              value={state.strEther}\r\n              onChange={(e) => State.update({ strEther: e.target.value })}\r\n              placeholder=\"Amount\"\r\n            />\r\n          </span>\r\n          <span\r\n            className=\"LidoStakeFormInputContainerSpan3\"\r\n            onClick={() => {\r\n              State.update({\r\n                strEther: (state.balance > 0.05\r\n                  ? parseFloat(state.balance) - 0.05\r\n                  : 0\r\n                ).toFixed(2),\r\n              });\r\n            }}\r\n          >\r\n            <button\r\n              className=\"LidoStakeFormInputContainerSpan3Content\"\r\n              disabled={!state.sender}\r\n            >\r\n              <span className=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\r\n            </button>\r\n          </span>\r\n        </div>\r\n        {!!state.sender ? (\r\n          <button\r\n            className=\"LidoStakeFormSubmitContainer\"\r\n            onClick={() => submitEthers(state.strEther, state.sender)}\r\n          >\r\n            <span>Submit</span>\r\n          </button>\r\n        ) : (\r\n          <Web3Connect\r\n            className=\"LidoStakeFormSubmitContainer\"\r\n            connectLabel=\"Connect with Web3\"\r\n          />\r\n        )}\r\n\r\n        <div className=\"LidoFooterContainer\">\r\n          {state.sender && (\r\n            <div className=\"LidoFooterRaw\">\r\n              <div className=\"LidoFooterRawLeft\">You will receive</div>\r\n              <div className=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\r\n            </div>\r\n          )}\r\n          <div className=\"LidoFooterRaw\">\r\n            <div className=\"LidoFooterRawLeft\">Exchange rate</div>\r\n            <div className=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>\r\n          </div>\r\n          {false && (\r\n            <div className=\"LidoFooterRaw\">\r\n              <div className=\"LidoFooterRawLeft\">Transaction cost</div>\r\n              <div className=\"LidoFooterRawRight\">{state.txCost}</div>\r\n            </div>\r\n          )}\r\n          <div className=\"LidoFooterRaw\">\r\n            <div className=\"LidoFooterRawLeft\">Reward fee</div>\r\n            <div className=\"LidoFooterRawRight\">10%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);"
    }
]