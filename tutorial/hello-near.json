[
    {
        "name":"The Contract",
        "description":"We have deployed a Hello World smart contract in the NEAR network at hello.near-examples.near. The contract exposes two methods:\r\n\r\nset_greeting(greeting: string): void, which accepts a greeting and stores it in the contract state.\r\nget_greeting(): string which returns the stored greeting.",
        "js":""
    },
    {
        "name":"Retrieving the Greeting",
        "description":"Since we want to interact with the NEAR network, we will use the Near object from the BOS API.",
        "js":"const contract = \"hello.near-examples.near\";\r\nconst greeting = Near.view(contract, \"get_greeting\", {});\r\n\r\nreturn <div>{greeting} World</div>;"
    },
    {
        "name":"Changing the Greeting",
        "description":"To modify the greeting, we simply need to use Near.call to call the set_greeting method. This however, requires us to have a frontend in which the user can input the new greeting.\r\n\r\nLets create it in two steps:\r\n\r\nBuild the HTML that will be rendered\r\nAdd the logic to handle the function call",
        "js":{
            "html":{
                "description":"Use the following code to create a simple frontend, composed by a title, an input form to change the greeting, and a button to submit the change.",
                "code":"const contract = \"hello.near-examples.near\";\r\nconst greeting = Near.view(contract, \"get_greeting\", {});\r\n\r\n// Define components\r\nconst greetingForm = (\r\n  <>\r\n    <div className=\"border border-black p-3\">\r\n      <label>Update greeting</label>\r\n      <input placeholder=\"Howdy\" onChange={onInputChange} />\r\n      <button className=\"btn btn-primary mt-2\" onClick={onBtnClick}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst notLoggedInWarning = <p> Login to change the greeting </p>;\r\n\r\n// Render\r\nreturn (\r\n  <>\r\n    <div className=\"container border border-info p-3\">\r\n      <h3 className=\"text-center\">\r\n        The contract says:\r\n        <span className=\"text-decoration-underline\"> {greeting} </span>\r\n      </h3>\r\n\r\n      <p className=\"text-center py-2\">\r\n        Look at that! A greeting stored on the NEAR blockchain.\r\n      </p>\r\n\r\n      {context.accountId ? greetingForm : notLoggedInWarning}\r\n    </div>\r\n  </>\r\n);",
                "info":"onChange & onClick: We have prepared our <input> and <button> to act when something happens. Particularly, we will build two methods: one when the input changes, and one when the button is pressed.\r\n\r\ncontext.accountId: We check if context.accountId is set, which tells us if the user has logged in using their NEAR account, and thus can interact with NEAR contracts. :"
            },
            "HandlingUserInput":{
                "description":"Having our component's view ready, we now need to define the logic for when the user inputs a new greeting and presses the Submit button. This is, we need to define the onInputChange and onBtnClick methods.",
                "input":[
                    {
                        "name":"onInputChange",
                        "description":"When the user inputs a new greeting, we want to store it somewhere until the Submit button is pressed, for this, we can use the application's State.\r\n\r\nIn BOS, the state is initialized through State.init, updated with State.update, and accessed through the state variable (notice the lowercase). Lets store the new greeting in the App's state:",
                        "code":"State.init({ new_greeting: \"\" });\r\n\r\nconst onInputChange = ({ target }) => {\r\n  State.update({ new_greeting: target.value });\r\n};"
                    },
                    {
                        "name":"onBtnClick",
                        "description":"The only thing left to do, is to handle when the user clicks the Submit button. What we want is to check if the user changed the greeting, and submit it to the contract.",
                        "code":"const onBtnClick = () => {\r\n  if (!state.new_greeting) {\r\n    return;\r\n  }\r\n\r\n  Near.call(contract, \"set_greeting\", {\r\n    greeting: state.new_greeting,\r\n  });\r\n};"
                    }
                ]
            }
        }
    }
]